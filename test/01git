#!/usr/bin/env rspec
# -*- mode: ruby -*-

require 'puppet/marshall/git'
require 'git_spec_helper'

describe Puppet::Marshall::Git do

    context "when examining git data" do
        it "returns true for a git URL" do
            [
                'https://public/testmod.git',
                'file:///home/git/testmod.git',
                'git+ssh:///home/git/testmod',
                'ssh:///home/git/testmod.git'
            ].each do |url|
                (Puppet::Marshall::Git.is_git? url).should be_true
            end
        end
    end

    context "when initializing" do

        after(:all) do
            FileUtils.rm_r "test/data/wrk/testmod"
        end

        it "opens an existing git repo when first created" do
            git = Puppet::Marshall::Git.new "testmod"
            git.repo.should eq "testmod"
        end

        it "clones an existing repo when using clone" do
            git = Puppet::Marshall::Git.clone("test/data/testmod",
                                        "test/data/wrk/testmod")
            git.repo.should eq "test/data/wrk/testmod"
            file = File.join(git.repo, "manifests", "testmod.pp")
            filecontent(file).should eq $master_content
        end

    end

    context "when updating" do

        before(:all) do
            @marsh = Puppet::Marshall::Git.clone("test/data/testmod",
                                                "test/data/wrk/marshall/testmod")
            @file = File.join(@marsh.repo, "manifests", "testmod.pp")
        end

        it "returns the marshalled repo location" do
            @marsh.repo.should eq "test/data/wrk/marshall/testmod"
            filecontent(@file).should eq $master_content
        end


        it "returns the remote name" do
            @marsh.remote_name.should eq 'origin'
        end

        it "returns remote branches on an existing marshalled repo" do
            remote = @marsh.remote_name
            @marsh.remote_branches.should =~ [
                "#{remote}/HEAD -> #{remote}/master",
                "#{remote}/master",
                "#{remote}/staging"]
        end

        it "returns local branches on an existing marshalled repo" do
            @marsh.pull
            @marsh.track('staging')
            @marsh.local_branches.should =~ ['master', 'staging']
        end

        it "creates local tracking branches for remote branches" do
            Dir.chdir("test/data/testmod") do
                system "git branch user >/dev/null 2>&1"
                system "git checkout user >/dev/null 2>&1"
                File.open("manifests/testmod.pp", 'w') do |fh|
                    fh.print $user_content
                end
                system "git add manifests/testmod.pp >/dev/null 2>&1"
                system "git commit -m\"update user content\" >/dev/null 2>&1"
            end
            @marsh.track_missing
            @marsh.local_branches.should =~ ['master', 'staging', 'user']
        end

    end

end
